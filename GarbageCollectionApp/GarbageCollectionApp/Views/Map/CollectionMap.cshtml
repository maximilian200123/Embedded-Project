@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "Collection Route";
}

<h2>Collection Route</h2>

<div class="row mb-3">
    <div class="col-md-4">
        <form asp-action="CollectionMap" method="get">
            <div class="form-group">
                <label for="selectedDate" class="control-label">Select Date:</label>
                <input type="date" id="selectedDate" name="selectedDate"
                       value="@ViewBag.SelectedDate" class="form-control" />
                <input type="submit" value="Show Route" class="btn btn-primary mt-2" />
            </div>
        </form>
    </div>
</div>

<div id="map" style="height: 600px; width: 100%;"></div>

<div class="mt-3">
    <button id="animateRoute" class="btn btn-success">Animate Route</button>
    <button id="resetView" class="btn btn-secondary ml-2">Reset View</button>
    <!-- Add Optimization Button -->
    <button id="optimizeRoute" class="btn btn-warning ml-2">Optimize Route</button>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map');
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const stops = @Html.Raw(Json.Serialize(ViewBag.Stops));

            // Function for markers with different colors
            const createMarkerIcon = (color, content = '') => L.divIcon({
                html: `<div style="background: ${color}; color: white; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 0 3px rgba(0,0,0,0.3); ">${content}</div>`,
                className: '',
                iconSize: [24, 24]
            });

            // Collection Points
            const collectionMarkers = [];
            const collectionPoints = [
        @foreach (var item in Model)
        {
            var lat = item.Latitude is string ? decimal.Parse(item.Latitude.ToString().Replace(',', '.')) : item.Latitude;
            var lng = item.Longitude is string ? decimal.Parse(item.Longitude.ToString().Replace(',', '.')) : item.Longitude;
            var collectionTime = item.CollectionTime is DateTime ? (DateTime)item.CollectionTime : DateTime.Parse(item.CollectionTime.ToString());
            <text>
                            {
                                binId: '@item.IdGarbageBin',
                                time: '@collectionTime.ToString("yyyy-MM-ddTHH:mm:ss")',
                                address: '@Html.Raw(item.Address.Replace("'", "\\'"))',
                                lat: @lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                lng: @lng.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                timestamp: new Date('@collectionTime.ToString("yyyy-MM-ddTHH:mm:ss")').getTime()
                            },
            </text>
        }
            ].sort((a, b) => a.timestamp - b.timestamp);

            // Create collection points markers
            collectionPoints.forEach((point, index) => {
                if (typeof point.lat === 'number' && typeof point.lng === 'number') {
                    const marker = L.marker([point.lat, point.lng]).addTo(map);

                    L.marker([point.lat, point.lng], {
                        icon: createMarkerIcon('#1976d2', index + 1)
                    }).addTo(map);

                    const dateObj = new Date(point.time);
                    const formattedTime = isNaN(dateObj.getTime())
                        ? 'Time not available'
                        : dateObj.toLocaleString('en-US', {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });

                    marker.bindPopup(`
                        <b>Stop #${index + 1}</b><br>
                        <b>Bin ID:</b> ${point.binId}<br>
                        <b>Time:</b> ${formattedTime}<br>
                        <b>Address:</b> ${point.address}
                    `);

                    collectionMarkers.push(marker);
                }
            });

            // Start and Finish markers (same as before)
            const startMarker = L.marker(
                [stops.startPoint.lat, stops.startPoint.lng],
                { icon: createMarkerIcon('#e74c3c') }
            ).addTo(map).bindPopup(`
                <b>START:</b> ${stops.startPoint.name}<br>
                <b>Address:</b> ${stops.startPoint.address}<br>
                <b>Coordinates:</b> ${stops.startPoint.lat}, ${stops.startPoint.lng}
            `);

            const finishMarker = L.marker(
                [stops.finishPoint.lat, stops.finishPoint.lng],
                { icon: createMarkerIcon('#e74c3c') }
            ).addTo(map).bindPopup(`
                <b>FINISH:</b> ${stops.finishPoint.name}<br>
                <b>Address:</b> ${stops.finishPoint.address}<br>
                <b>Coordinates:</b> ${stops.finishPoint.lat}, ${stops.finishPoint.lng}
            `);

            // Combine all markers for initial view
            const allMarkers = [startMarker, ...collectionMarkers, finishMarker];
            if (allMarkers.length > 0) {
                const bounds = L.latLngBounds(allMarkers.map(m => m.getLatLng()));
                map.fitBounds(bounds.pad(0.2));
            }

            // Animation functionality (same as before)
            let animationInterval;
            document.getElementById('animateRoute').addEventListener('click', function () {
                clearInterval(animationInterval);

                allMarkers.forEach(marker => { marker.closePopup(); });

                let currentMarker = 0;
                const animateStep = function () {
                    if (currentMarker < allMarkers.length) {
                        allMarkers[currentMarker].openPopup();
                        map.flyTo(allMarkers[currentMarker].getLatLng(), 16, { duration: 1 });
                        currentMarker++;
                    } else {
                        clearInterval(animationInterval);
                    }
                };

                if (allMarkers.length > 0) {
                    allMarkers[0].openPopup();
                    map.flyTo(allMarkers[0].getLatLng(), 16, { duration: 1 });
                    currentMarker = 1;
                    animationInterval = setInterval(animateStep, 2000);
                }
            });

            // Reset view
            document.getElementById('resetView').addEventListener('click', function () {
                clearInterval(animationInterval);
                if (allMarkers.length > 0) {
                    const bounds = L.latLngBounds(allMarkers.map(m => m.getLatLng()));
                    map.fitBounds(bounds.pad(0.2));
                    allMarkers.forEach(marker => marker.closePopup());
                }
            });

            // Handle Optimization Button
            document.getElementById('optimizeRoute').addEventListener('click', function () {
                const selectedDate = document.getElementById('selectedDate').value;
                if (!selectedDate) return;

                // Make AJAX call to RouteController's Optimize action (same as your controller's Optimize function)
                fetch('@Url.Action("Optimize", "Route")?date=' + selectedDate, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove original markers
                        collectionMarkers.forEach(marker => map.removeLayer(marker));
                        // Remove finish and start markers from optimized view
                        startMarker.remove();
                        finishMarker.remove();

                        // Create optimized route markers using returned data
                        const optimizedMarkers = [];
                        data.optimizedOrder.forEach((index, i) => {
                            const point = data.points[index];
                            const marker = L.marker([point.Latitude, point.Longitude], {
                                icon: createMarkerIcon('#2ecc71', i + 1)
                            }).addTo(map);
                            marker.bindPopup(`
                                <b>Stop #${i + 1}</b><br>
                                <b>Address:</b> ${point.Address}<br>
                                <b>Coordinates:</b> ${point.Latitude}, ${point.Longitude}
                            `);
                            optimizedMarkers.push(marker);
                        });

                        // Fit map to the optimized markers
                        const allNewMarkers = [startMarker, ...optimizedMarkers, finishMarker];
                        const bounds = L.latLngBounds(allNewMarkers.map(m => m.getLatLng()));
                        map.fitBounds(bounds.pad(0.2));
                    })
                    .catch(error => {
                        console.error('Error optimizing route:', error);
                    });
            });
        });
    </script>
}
