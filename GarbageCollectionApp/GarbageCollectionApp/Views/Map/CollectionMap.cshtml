@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "Collection Route";
}

<h2>Collection Route</h2>

<div class="row mb-3">
    <div class="col-md-4">
        <form asp-action="CollectionMap" method="get">
            <div class="form-group">
                <label for="selectedDate" class="control-label">Select Date:</label>
                <input type="date" id="selectedDate" name="selectedDate" value="@ViewBag.SelectedDate" class="form-control" />
                <input type="submit" value="Show Route" class="btn btn-primary mt-2" />
            </div>
        </form>
    </div>
</div>

<div class="mt-3">
    <button id="animateRoute" class="btn btn-success">Animate Route</button>
    <button id="resetView" class="btn btn-secondary ml-2">Reset View</button>
    <button id="optimizeRoute" class="btn btn-warning ml-2">Optimize Route</button>
    <button id="originalRoute" class="btn btn-outline-dark ml-2">Show Original Route</button>
</div>

@* list and map *@
<div class="row mt-3">
    <div class="col-md-3">
        <div id="routeListContainer">
            <h4 id="routeListTitle">Original Stop Order</h4>
            <ol id="routeStopsList" style="max-height: 500px; overflow-y: auto;"></ol>
        </div>
    </div>
    <div class="col-md-9">
        <div id="map" style="height: 600px; width: 100%;"></div>
    </div>
</div>

@* table for statistics *@
<div class="row mt-3">
    <div class="col-12">
        <div id="routeStats" style="display: block;">
            <h5>Route Statistics</h5>
            <table class="table table-bordered table-sm w-auto">
                <thead>
                    <tr>
                        <th></th>
                        <th>Distance (km)</th>
                        <th>Estimated Time</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Original Route</td>
                        <td id="originalDistanceCell">—</td>
                        <td id="originalTimeCell">—</td>
                    </tr>
                    <tr id="optimizedRow" style="display: none;">
                        <td>Optimized Route</td>
                        <td id="optimizedDistanceCell"></td>
                        <td id="optimizedTimeCell"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>



@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        .route-label {
            font-size: 12px;
            font-weight: bold;
            text-align: center;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('map');
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const stops = @Html.Raw(Json.Serialize(ViewBag.Stops));

            const createMarkerIcon = (color, content = '') => L.divIcon({
                html: `<div style="background: ${color}; color: white; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 0 3px rgba(0,0,0,0.3);">${content}</div>`,
                className: '',
                iconSize: [24, 24]
            });

            const collectionPoints = [
                { binId: 'START', time: null, address: stops.startPoint.address, lat: stops.startPoint.lat, lng: stops.startPoint.lng, timestamp: 0 },
                @foreach (var item in Model)
                {
                    var lat = item.Latitude is string ? decimal.Parse(item.Latitude.ToString().Replace(',', '.')) : item.Latitude;
                    var lng = item.Longitude is string ? decimal.Parse(item.Longitude.ToString().Replace(',', '.')) : item.Longitude;
                    var collectionTime = item.CollectionTime is DateTime ? (DateTime)item.CollectionTime : DateTime.Parse(item.CollectionTime.ToString());
                    <text>
                                    {
                                        binId: '@item.IdGarbageBin',
                                        time: '@collectionTime.ToString("yyyy-MM-ddTHH:mm:ss")',
                                        address: '@Html.Raw(item.Address.Replace("'", "\\'"))',
                                        lat: @lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                        lng: @lng.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                        timestamp: new Date('@collectionTime.ToString("yyyy-MM-ddTHH:mm:ss")').getTime()
                                    },
                    </text>
                }
                { binId: 'END', time: null, address: stops.finishPoint.address, lat: stops.finishPoint.lat, lng: stops.finishPoint.lng, timestamp: 9999999999999 }
            ];
            // use two layers, one for each type of marker
            const originalMarkerLayer = L.layerGroup().addTo(map);
            const optimizedMarkerLayer = L.layerGroup().addTo(map);
            const allMarkers = [];

            const routeStopsList = document.getElementById('routeStopsList');
            const routeListTitle = document.getElementById('routeListTitle');

            function populateOriginalRoute() {
                routeStopsList.innerHTML = '';
                originalMarkerLayer.clearLayers();
                routeListTitle.innerText = 'Original Stop Order';
                collectionPoints.forEach((point, index) => {
                    const latlng = [point.lat, point.lng];
                    const marker = L.marker(latlng, {
                        icon: createMarkerIcon('#1976d2', index + 1)
                    }).addTo(originalMarkerLayer);

                    marker.bindPopup(`
                        <b>Stop #${index + 1}</b><br>
                        <b>Bin ID:</b> ${point.binId}<br>
                        <b>Address:</b> ${point.address}
                    `);

                    const li = document.createElement('li');
                    li.innerHTML = `<b>#${index + 1}</b> – ${point.address}`;
                    li.style.cursor = 'pointer';
                    li.onclick = () => {
                        map.flyTo(latlng, 16, { duration: 1 });
                        marker.openPopup();
                    };
                    routeStopsList.appendChild(li);
                });
                const selectedDate = document.getElementById('selectedDate').value;

                fetch('@Url.Action("Optimize", "Route")?date=' + selectedDate)
                .then(res => res.json())
                .then(data => {
                    document.getElementById('originalDistanceCell').innerText = data.originalDistance.toFixed(2);
                    document.getElementById('optimizedRow').style.display = 'none';
                });
            }

            const initialBounds = L.latLngBounds(collectionPoints.map(p => [p.lat, p.lng]));
            map.fitBounds(initialBounds.pad(0.2));

            populateOriginalRoute();

            //function for reset view
            document.getElementById('resetView').addEventListener('click', function () {
                map.fitBounds(initialBounds.pad(0.2));
            });

            //function for original route, clers the layers
            document.getElementById('originalRoute').addEventListener('click', function () {
                optimizedMarkerLayer.clearLayers();
                populateOriginalRoute();
                map.fitBounds(initialBounds.pad(0.2));
            });

            //function for optimize route
            document.getElementById('optimizeRoute').addEventListener('click', function () {
                const selectedDate = document.getElementById('selectedDate').value;
                if (!selectedDate) return;

                //showing the statistics
                fetch('@Url.Action("Optimize", "Route")?date=' + selectedDate)
                    .then(response => response.json())
                    .then(data => {
                        originalMarkerLayer.clearLayers();
                        optimizedMarkerLayer.clearLayers();

                        const points = data.allPoints;
                        const order = data.optimizedOrder;

                        routeStopsList.innerHTML = '';
                        routeListTitle.innerText = 'Optimized Stop Order';
                        // updates the statistics table with values from backend
                        document.getElementById('originalDistanceCell').innerText = data.originalDistance.toFixed(2);// 2 decimals
                        document.getElementById('originalTimeCell').innerText = `${data.originalTimeMinutes} min`;
                        document.getElementById('optimizedDistanceCell').innerText = data.totalDistance.toFixed(2);
                        document.getElementById('optimizedTimeCell').innerText = `${data.estimatedTimeMinutes} min`;
                        document.getElementById('optimizedRow').style.display = 'table-row';//makes the row visible

                        //loop over the indexes from optimizedOrder
                        order.forEach((i, idx) => {
                            const point = points[i];
                            const latlng = [point.latitude, point.longitude];//prepare the coordinate of the point

                            //add marker to the optimizedMarkerLayer
                            const marker = L.marker(latlng, {
                                icon: createMarkerIcon('#f39c12', idx + 1)//start from #1 not #0
                            }).addTo(optimizedMarkerLayer).bindPopup(`<b>Stop #${idx + 1}</b><br>${point.address}`);

                            //creates element and makes it clickable
                            const li = document.createElement('li');
                            li.innerHTML = `<b>#${idx + 1}</b> – ${point.address}`;
                            li.style.cursor = 'pointer';
                            li.onclick = () => {
                                map.flyTo(latlng, 16, { duration: 1 });
                                marker.openPopup();
                            };
                            routeStopsList.appendChild(li);
                        });

                        map.fitBounds(L.latLngBounds(order.map(i => [points[i].latitude, points[i].longitude])).pad(0.2));
                    });
            });
        });
    </script>
}
